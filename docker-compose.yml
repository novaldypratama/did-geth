x-geth-def: &geth-def
  image: ethereum/client-go:${GETH_VERSION:-v1.12.0}  # Pin to <1.14 with Clique support
  restart: on-failure
  entrypoint:
    - /bin/sh
    - -c
    - |
      set -e
      
      echo "=== Initializing $${GETH_IDENTITY} ($${NODE_TYPE}) ==="
      echo "Node Type: $${NODE_TYPE:-validator}"
      echo "Account: $${ACCOUNT_ADDRESS}"
      echo "TOML Config: /config/config.toml"
      
      # Create data directory if it doesn't exist
      mkdir -p /opt/geth/data
      
      # Idempotent genesis initialization
      if [ ! -d "/opt/geth/data/geth/chaindata" ]; then
        echo "Initializing genesis block..."
        geth init --datadir /opt/geth/data /config/genesis.json
      else
        echo "Genesis already initialized, skipping..."
      fi
      
      # Wait for bootnode enode file to be available
      echo "Waiting for bootnode enode file..."
      while [ ! -f "/config/keys/bootnode.enode" ]; do
        echo "Bootnode enode not found, waiting 2 seconds..."
        sleep 2
      done
      
      # Idempotent account import (sanitize key, import if not exists)
      if [ -f "/opt/geth/data/keystore/accountPrivateKey" ]; then
        echo "Importing account private key..."
        PRIV_KEY=$(cat /opt/geth/data/keystore/accountPrivateKey | tr -d '[:space:]' | sed 's/^0x//')
        echo "$${ACCOUNT_PASSWORD:-}" > /opt/geth/data/password.txt
        
        # Check if account already exists
        if ! geth account list --datadir /opt/geth/data | grep -qi "$${ACCOUNT_ADDRESS}"; then
          echo "$${PRIV_KEY}" | geth account import --datadir /opt/geth/data --password /opt/geth/data/password.txt
          echo "Account imported successfully"
        else
          echo "Account already exists, skipping import..."
        fi
      fi
      
      # Read bootnode enode
      BOOTNODE_ENODE=$(cat /config/keys/bootnode.enode)
      echo "Using bootnode: $${BOOTNODE_ENODE}"
      
      # Build base geth command
      GETH_CMD="geth --config /config/config.toml --bootnodes $${BOOTNODE_ENODE}"
      
      # Add node-specific arguments
      if [ "$${NODE_TYPE}" = "validator" ]; then
        echo "Starting as validator node..."
        GETH_CMD="$${GETH_CMD} --unlock 0x$${ACCOUNT_ADDRESS} --password /opt/geth/data/password.txt --allow-insecure-unlock --mine --miner.etherbase 0x$${ACCOUNT_ADDRESS} --http.api admin,eth,net,web3,txpool,clique"
      elif [ "$${NODE_TYPE}" = "rpc" ]; then
        echo "Starting as RPC node..."
        GETH_CMD="$${GETH_CMD} --http.api admin,eth,net,web3,txpool,clique --ws.api admin,debug,web3,eth,txpool,net --rpc.allow-unprotected-txs"
      fi
      
      # Add extra args if provided
      if [ -n "$${EXTRA_ARGS:-}" ]; then
        GETH_CMD="$${GETH_CMD} $${EXTRA_ARGS}"
      fi
      
      echo "Executing: $${GETH_CMD}"
      exec $${GETH_CMD}

# x-web3signerProxy-def: &web3signerProxy-def
#   image: consensys/web3signer:${WEB3SIGNER_VERSION:-latest}
#   command:
#     [
#       "--config-file=/opt/web3signer/config.yaml",
#       "eth1",
#       "--downstream-http-host=0.0.0.0",
#       "--downstream-http-port=8545",
#       "--downstream-http-proxy-host=rpcnode",
#       "--downstream-http-proxy-port=8545",
#       "--downstream-http-request-timeout=60000",
#     ]
#   ports:
#     - 8545

services:
  bootnode:
    image: ethereum/client-go:alltools-${GETH_VERSION:-v1.12.0}
    container_name: bootnode
    entrypoint:
      - /bin/sh
      - -c
      - |
        set -e
        
        # Ensure keys directory exists
        mkdir -p /config/keys
        
        KEY_PATH="/config/keys/bootnode.key"
        ENODE_PATH="/config/keys/bootnode.enode"
        
        # Generate bootnode key if it doesn't exist
        if [ ! -f "$${KEY_PATH}" ]; then
          echo "Generating new bootnode key..."
          bootnode -genkey "$${KEY_PATH}"
        else
          echo "Using existing bootnode key..."
        fi
        
        # Get public key and construct enode
        PUBKEY=$(bootnode -nodekey "$${KEY_PATH}" -writeaddress)
        IP=$(hostname -i)
        ENODE="enode://$${PUBKEY}@$${IP}:30301"
        
        echo "Bootnode enode: $${ENODE}"
        echo "$${ENODE}" > "$${ENODE_PATH}"
        
        echo "Starting bootnode..."
        exec bootnode -nodekey "$${KEY_PATH}" -addr ":30301" -verbosity 3
    volumes:
      - ./network/config/geth/bootnode:/config/keys
    ports:
      - 30301
    networks:
      ethnet:
        ipv4_address: 172.16.239.10
    healthcheck:
      test: ["CMD", "sh", "-c", "netstat -tuln | grep :30301 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  validator1:
    <<: *geth-def
    container_name: validator1
    environment:
      - GETH_IDENTITY=validator1
      - NODE_TYPE=validator
      - ACCOUNT_ADDRESS=ed9d02e382b34818e88b88a309c7fe71e65f419d
      - ACCOUNT_PASSWORD=  # Set securely, e.g., via secrets
    volumes:
      - validator1-data:/opt/geth/data
      - ./network/config/geth:/config
      - ./network/config/geth/bootnode:/config/keys  # Shared enodes
      - ./network/config/nodes/validator1:/opt/geth/data/keystore
    ports:
      - 21001:8545/tcp
      - 30303
    depends_on:
      bootnode:
        condition: service_healthy
    networks:
      ethnet:
        ipv4_address: 172.16.239.11
    healthcheck:
      test: ["CMD", "sh", "-c", "geth attach --exec 'eth.blockNumber' http://localhost:8545 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  validator2:
    <<: *geth-def
    container_name: validator2
    environment:
      - GETH_IDENTITY=validator2
      - NODE_TYPE=validator
      - ACCOUNT_ADDRESS=b30f304642de3fee4365ed5cd06ea2e69d3fd0ca
      - ACCOUNT_PASSWORD=  # Set securely, e.g., via secrets
    volumes:
      - validator2-data:/opt/geth/data
      - ./network/config/geth:/config
      - ./network/config/geth/bootnode:/config/keys  # Shared enodes
      - ./network/config/nodes/validator2:/opt/geth/data/keystore
    ports:
      - 21002:8545/tcp
      - 30303
    depends_on:
      bootnode:
        condition: service_healthy
    networks:
      ethnet:
        ipv4_address: 172.16.239.12
    healthcheck:
      test: ["CMD", "sh", "-c", "geth attach --exec 'eth.blockNumber' http://localhost:8545 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  validator3:
    <<: *geth-def
    container_name: validator3
    environment:
      - GETH_IDENTITY=validator3
      - NODE_TYPE=validator
      - ACCOUNT_ADDRESS=0886328869e4e1f401e1052a5f4aae8b45f42610
      - ACCOUNT_PASSWORD=  # Set securely, e.g., via secrets
    volumes:
      - validator3-data:/opt/geth/data
      - ./network/config/geth:/config
      - ./network/config/geth/bootnode:/config/keys  # Shared enodes
      - ./network/config/nodes/validator3:/opt/geth/data/keystore
    ports:
      - 21003:8545/tcp
      - 30303
    depends_on:
      bootnode:
        condition: service_healthy
    networks:
      ethnet:
        ipv4_address: 172.16.239.13
    healthcheck:
      test: ["CMD", "sh", "-c", "geth attach --exec 'eth.blockNumber' http://localhost:8545 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  validator4:
    <<: *geth-def
    container_name: validator4
    environment:
      - GETH_IDENTITY=validator4
      - NODE_TYPE=validator
      - ACCOUNT_ADDRESS=f48de4a0c2939e62891f3c6aca68982975477e45
      - ACCOUNT_PASSWORD=  # Set securely, e.g., via secrets
    volumes:
      - validator4-data:/opt/geth/data
      - ./network/config/geth:/config
      - ./network/config/geth/bootnode:/config/keys  # Shared enodes
      - ./network/config/nodes/validator4:/opt/geth/data/keystore
    ports:
      - 21004:8545/tcp
      - 30303
    depends_on:
      bootnode:
        condition: service_healthy
    networks:
      ethnet:
        ipv4_address: 172.16.239.14
    healthcheck:
      test: ["CMD", "sh", "-c", "geth attach --exec 'eth.blockNumber' http://localhost:8545 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # additional validator node required for testing of adding a new validator into the consensus
  # validator5:
  #   <<: *geth-def
  #   ports:
  #     - 21005:8545/tcp
  #     - 30303
  #     - 9545
  #   environment:
  #     - OTEL_RESOURCE_ATTRIBUTES=service.name=validator5,service.version=${BESU_VERSION:-latest}
  #   labels:
  #     - "consensus=besu"
  #   volumes:
  #     - ./network/config/besu/:/config
  #     - ./network/config/nodes/node-test5:/opt/besu/keys
  #     - ./network/logs/besu:/tmp/besu
  #   networks:
  #     quorum-dev-quickstart:
  #       ipv4_address: 172.16.239.16

  rpcnode:
    <<: *geth-def
    container_name: rpcnode
    environment:
      - GETH_IDENTITY=rpcnode
      - NODE_TYPE=rpc
      - ACCOUNT_ADDRESS=c9c913c8c3c1cd416d80a0abf475db2062f161f6
      - ACCOUNT_PASSWORD=  # Set securely, e.g., via secrets
    volumes:
      - rpcnode-data:/opt/geth/data
      - ./network/config/geth:/config
      - ./network/config/geth/bootnode:/config/keys  # Shared enodes
      - ./network/config/nodes/rpcnode:/opt/geth/data/keystore
    ports:
      - 8545:8545/tcp
      - 8546:8546/tcp
    depends_on:
      bootnode:
        condition: service_healthy
    networks:
      ethnet:
        ipv4_address: 172.16.239.15
    healthcheck:
      test: ["CMD", "sh", "-c", "geth attach --exec 'eth.blockNumber' http://localhost:8545 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # web3signerProxy:
  #   <<: *web3signerProxy-def
  #   volumes:
  #     - ./network/config/web3signer/config.yaml:/opt/web3signer/config.yaml
  #     - ./network/config/web3signer/keys:/opt/web3signer/keys
  #     - ./network/config/web3signer/data:/opt/web3signer/data
  #   depends_on:
  #     - validator1
  #     - rpcnode
  #   ports:
  #     - 18545:8545/tcp
  #   networks:
  #     quorum-dev-quickstart:
  #       ipv4_address: 172.16.239.40

  # ethsignerProxy:
  #   <<: *ethsignerProxy-def
  #   volumes:
  #     - ./network/config/ethsigner/password:/opt/ethsigner/passwordfile
  #     - ./network/config/ethsigner/key:/opt/ethsigner/keyfile
  #   depends_on:
  #     - validator1
  #     - rpcnode
  #   ports:
  #     - 18545:8545/tcp
  #   networks:
  #     quorum-dev-quickstart:
  #       ipv4_address: 172.16.239.40

  # prometheus:
  #   image: "prom/prometheus"
  #   volumes:
  #     - ./network/config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus:/prometheus
  #   command:
  #     - --config.file=/etc/prometheus/prometheus.yml
  #   ports:
  #     - 9090:9090/tcp
  #   networks:
  #     quorum-dev-quickstart:
  #       ipv4_address: 172.16.239.32

  # grafana:
  #   image: "grafana/grafana"
  #   environment:
  #     - GF_AUTH_ANONYMOUS_ENABLED=true
  #     - GF_USERS_VIEWERS_CAN_EDIT=true
  #   volumes:
  #     - ./network/config/grafana/provisioning/:/etc/grafana/provisioning/
  #     - grafana:/var/lib/grafana
  #   ports:
  #     - 3000:3000/tcp
  #   networks:
  #     quorum-dev-quickstart:
  #       ipv4_address: 172.16.239.33

  # loki:
  #   image: "grafana/loki"
  #   volumes:
  #     - ./network/infra/loki/loki.yml:/etc/loki/local-config.yaml
  #   command: -config.file=/etc/loki/local-config.yaml
  #   ports:
  #     - 3100:3100/tcp
  #   networks:
  #     quorum-dev-quickstart:
  #       ipv4_address: 172.16.239.34

  # promtail:
  #   image: "grafana/promtail"
  #   volumes:
  #     - ./network/logs:/var/log
  #     - ./network/infra/promtail/promtail.yml:/etc/promtail/config.yml
  #   command: -config.file=/etc/promtail/config.yml
  #   networks:
  #     quorum-dev-quickstart:
  #       ipv4_address: 172.16.239.35

volumes:
  validator1-data:
  validator2-data:
  validator3-data:
  validator4-data:
  rpcnode-data:

networks:
  ethnet:
    name: ethnet
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.239.0/24
